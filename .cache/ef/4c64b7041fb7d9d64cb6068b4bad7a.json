{"id":"node_modules/livekit-client/dist/room/track/LocalVideoTrack.js","dependencies":[{"name":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\track\\LocalVideoTrack.js.map","includedInParent":true,"mtime":1680887195655},{"name":"D:\\Livekit-Client\\package.json","includedInParent":true,"mtime":1680887270118},{"name":"D:\\Livekit-Client\\node_modules\\livekit-client\\package.json","includedInParent":true,"mtime":1680887189879},{"name":"../../logger","loc":{"line":15,"column":41,"index":938},"parent":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\track\\LocalVideoTrack.js","resolved":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\logger.js"},{"name":"../../proto/livekit_rtc","loc":{"line":16,"column":30,"index":986},"parent":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\track\\LocalVideoTrack.js","resolved":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\proto\\livekit_rtc.js"},{"name":"../stats","loc":{"line":17,"column":24,"index":1038},"parent":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\track\\LocalVideoTrack.js","resolved":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\stats.js"},{"name":"./LocalTrack","loc":{"line":18,"column":45,"index":1096},"parent":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\track\\LocalVideoTrack.js","resolved":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\track\\LocalTrack.js"},{"name":"./Track","loc":{"line":19,"column":24,"index":1138},"parent":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\track\\LocalVideoTrack.js","resolved":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\track\\Track.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = __importDefault(require(\"../../logger\"));\nconst livekit_rtc_1 = require(\"../../proto/livekit_rtc\");\nconst stats_1 = require(\"../stats\");\nconst LocalTrack_1 = __importDefault(require(\"./LocalTrack\"));\nconst Track_1 = require(\"./Track\");\n// delay before attempting to upgrade\nconst QUALITY_UPGRADE_DELAY = 60 * 1000;\n// avoid downgrading too quickly\nconst QUALITY_DOWNGRADE_DELAY = 5 * 1000;\nconst ridOrder = ['q', 'h', 'f'];\nclass LocalVideoTrack extends LocalTrack_1.default {\n    constructor(mediaTrack, name, constraints) {\n        super(mediaTrack, Track_1.Track.Kind.Video, name, constraints);\n        this.monitorSender = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.sender) {\n                return;\n            }\n            const stats = yield this.getSenderStats();\n            const statsMap = new Map(stats.map((s) => [s.rid, s]));\n            if (this.prevStats && this.isSimulcast) {\n                this.checkAndUpdateSimulcast(statsMap);\n            }\n            this.prevStats = statsMap;\n            setTimeout(() => {\n                this.monitorSender();\n            }, stats_1.monitorFrequency);\n        });\n    }\n    get isSimulcast() {\n        if (this.sender && this.sender.getParameters().encodings.length > 1) {\n            return true;\n        }\n        return false;\n    }\n    /* internal */\n    startMonitor(signalClient) {\n        // only monitor simulcast streams\n        if (!this.isSimulcast) {\n            return;\n        }\n        this.signalClient = signalClient;\n        setTimeout(() => {\n            this.monitorSender();\n        }, stats_1.monitorFrequency);\n    }\n    stop() {\n        this.sender = undefined;\n        this.mediaStreamTrack.getConstraints();\n        super.stop();\n    }\n    mute() {\n        const _super = Object.create(null, {\n            mute: { get: () => super.mute }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.source === Track_1.Track.Source.Camera) {\n                logger_1.default.debug('stopping camera track');\n                // also stop the track, so that camera indicator is turned off\n                this.mediaStreamTrack.stop();\n            }\n            yield _super.mute.call(this);\n            return this;\n        });\n    }\n    unmute() {\n        const _super = Object.create(null, {\n            unmute: { get: () => super.unmute }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.source === Track_1.Track.Source.Camera) {\n                logger_1.default.debug('reacquiring camera track');\n                yield this.restartTrack();\n            }\n            yield _super.unmute.call(this);\n            return this;\n        });\n    }\n    getSenderStats() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.sender) {\n                return [];\n            }\n            const items = [];\n            const stats = yield this.sender.getStats();\n            let sender;\n            stats.forEach((v) => {\n                if (v.type === 'track'\n                    && v.trackIdentifier === this.mediaStreamTrack.id) {\n                    sender = v;\n                }\n            });\n            if (!sender) {\n                return items;\n            }\n            // match the outbound-rtp items\n            stats.forEach((v) => {\n                if (v.type === 'outbound-rtp' && v.trackId === sender.id) {\n                    const vs = {\n                        type: 'video',\n                        streamId: v.id,\n                        frameHeight: v.frameHeight,\n                        frameWidth: v.frameWidth,\n                        firCount: v.firCount,\n                        pliCount: v.pliCount,\n                        nackCount: v.nackCount,\n                        packetsSent: v.packetsSent,\n                        framesSent: v.framesSent,\n                        timestamp: v.timestamp,\n                        rid: v.rid,\n                        retransmittedPacketsSent: v.retransmittedPacketsSent,\n                        qualityLimitationReason: v.qualityLimitationReason,\n                        qualityLimitationResolutionChanges: v.qualityLimitationResolutionChanges,\n                    };\n                    // locate the appropriate remote-inbound-rtp item\n                    const r = stats.get(v.remoteId);\n                    if (r) {\n                        vs.jitter = r.jitter;\n                        vs.packetsLost = r.packetsLost;\n                        vs.roundTripTime = r.roundTripTime;\n                    }\n                    items.push(vs);\n                }\n            });\n            return items;\n        });\n    }\n    setPublishingQuality(maxQuality) {\n        if (!this.isSimulcast || !this.encodings) {\n            return;\n        }\n        let hasChanged = false;\n        const layers = [];\n        this.encodings.forEach((encoding) => {\n            var _a;\n            const quality = videoQualityForRid((_a = encoding.rid) !== null && _a !== void 0 ? _a : '');\n            const active = quality <= maxQuality;\n            if (active !== encoding.active) {\n                hasChanged = true;\n                encoding.active = active;\n            }\n            if (active) {\n                layers.push(quality);\n            }\n        });\n        if (!hasChanged || !this.sender || !this.sid) {\n            return;\n        }\n        this.lastQualityChange = new Date().getTime();\n        this.lastExplicitQualityChange = new Date().getTime();\n        const params = this.sender.getParameters();\n        params.encodings = this.encodings;\n        logger_1.default.debug('setting publishing quality. max quality', maxQuality);\n        this.sender.setParameters(params);\n    }\n    setDeviceId(deviceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.constraints.deviceId === deviceId) {\n                return;\n            }\n            this.constraints.deviceId = deviceId;\n            // when video is muted, underlying media stream track is stopped and\n            // will be restarted later\n            if (!this.isMuted) {\n                yield this.restartTrack();\n            }\n        });\n    }\n    restartTrack(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let constraints;\n            if (options) {\n                const streamConstraints = LocalTrack_1.default.constraintsForOptions({ video: options });\n                if (typeof streamConstraints.video !== 'boolean') {\n                    constraints = streamConstraints.video;\n                }\n            }\n            yield this.restart(constraints);\n        });\n    }\n    checkAndUpdateSimulcast(statsMap) {\n        var _a, _b;\n        if (!this.sender || this.isMuted) {\n            return;\n        }\n        const params = this.sender.getParameters();\n        this.encodings = params.encodings;\n        let bestEncoding;\n        this.encodings.forEach((encoding) => {\n            // skip inactive encodings\n            if (!encoding.active)\n                return;\n            if (bestEncoding === undefined) {\n                bestEncoding = encoding;\n            }\n            else if (bestEncoding.rid\n                && encoding.rid\n                && ridOrder.indexOf(bestEncoding.rid) < ridOrder.indexOf(encoding.rid)) {\n                bestEncoding = encoding;\n            }\n            else if (bestEncoding.maxBitrate !== undefined\n                && encoding.maxBitrate !== undefined\n                && bestEncoding.maxBitrate < encoding.maxBitrate) {\n                bestEncoding = encoding;\n            }\n        });\n        if (!bestEncoding) {\n            return;\n        }\n        const rid = (_a = bestEncoding.rid) !== null && _a !== void 0 ? _a : '';\n        const sendStats = statsMap.get(rid);\n        const lastStats = (_b = this.prevStats) === null || _b === void 0 ? void 0 : _b.get(rid);\n        if (!sendStats || !lastStats) {\n            return;\n        }\n        const currentQuality = videoQualityForRid(rid);\n        // adaptive simulcast algorithm notes (davidzhao)\n        // Chrome (and other browsers) will automatically pause the highest layer\n        // when it runs into bandwidth limitations. When that happens, it would not\n        // be able to send any new frames between the two stats checks.\n        //\n        // We need to set that layer to inactive intentionally, because chrome tends\n        // to flicker, meaning it will attempt to send that layer again shortly\n        // afterwards, flip-flopping every few seconds. We want to avoid that.\n        //\n        // Note: even after bandwidth recovers, the flip-flopping behavior continues\n        // this is possibly due to SFU-side PLI generation and imperfect bandwidth estimation\n        if (sendStats.qualityLimitationResolutionChanges\n            - lastStats.qualityLimitationResolutionChanges > 0) {\n            this.lastQualityChange = new Date().getTime();\n        }\n        // log.debug('frameSent', sendStats.framesSent, 'lastSent', lastStats.framesSent,\n        //   'elapsed', sendStats.timestamp - lastStats.timestamp);\n        if (sendStats.framesSent - lastStats.framesSent > 0) {\n            // frames have been sending ok, consider upgrading quality\n            if (currentQuality === livekit_rtc_1.VideoQuality.HIGH || !this.lastQualityChange)\n                return;\n            const nextQuality = currentQuality + 1;\n            if ((new Date()).getTime() - this.lastQualityChange < QUALITY_UPGRADE_DELAY) {\n                return;\n            }\n            logger_1.default.debug('upgrading video quality to', nextQuality);\n            this.setPublishingQuality(nextQuality);\n            return;\n        }\n        // if best layer has not sent anything, do not downgrade till the\n        // best layer starts sending something. It is possible that the\n        // browser has not started some layer(s) due to cpu/bandwidth\n        // constraints\n        if (sendStats.framesSent === 0)\n            return;\n        // if we've upgraded or downgraded recently, give it a bit of time before\n        // downgrading again\n        if (this.lastExplicitQualityChange\n            && ((new Date()).getTime() - this.lastExplicitQualityChange) < QUALITY_DOWNGRADE_DELAY) {\n            return;\n        }\n        if (currentQuality === livekit_rtc_1.VideoQuality.UNRECOGNIZED) {\n            return;\n        }\n        if (currentQuality === livekit_rtc_1.VideoQuality.LOW) {\n            // already the lowest quality, nothing we can do\n            return;\n        }\n        logger_1.default.debug('downgrading video quality to', currentQuality - 1);\n        this.setPublishingQuality(currentQuality - 1);\n    }\n}\nexports.default = LocalVideoTrack;\nfunction videoQualityForRid(rid) {\n    switch (rid) {\n        case 'f':\n            return livekit_rtc_1.VideoQuality.HIGH;\n        case 'h':\n            return livekit_rtc_1.VideoQuality.MEDIUM;\n        case 'q':\n            return livekit_rtc_1.VideoQuality.LOW;\n        default:\n            return livekit_rtc_1.VideoQuality.UNRECOGNIZED;\n    }\n}\n"},"sourceMaps":{"js":{"version":3,"file":"LocalVideoTrack.js","sourceRoot":"","sources":["../../../src/room/track/LocalVideoTrack.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"2babe515b3b115d664316aced8cecc92","cacheData":{"env":{}}}