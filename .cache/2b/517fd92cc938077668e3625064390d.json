{"id":"node_modules/livekit-client/dist/room/events.js","dependencies":[{"name":"D:\\Livekit-Client\\node_modules\\livekit-client\\dist\\room\\events.js.map","includedInParent":true,"mtime":1680887191835},{"name":"D:\\Livekit-Client\\package.json","includedInParent":true,"mtime":1680887270118},{"name":"D:\\Livekit-Client\\node_modules\\livekit-client\\package.json","includedInParent":true,"mtime":1680887189879}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TrackEvent = exports.EngineEvent = exports.ParticipantEvent = exports.RoomEvent = void 0;\n/**\n * Events are the primary way LiveKit notifies your application of changes.\n *\n * The following are events emitted by [[Room]], listen to room events like\n *\n * ```typescript\n * room.on(RoomEvent.TrackPublished, (track, publication, participant) => {})\n * ```\n */\nvar RoomEvent;\n(function (RoomEvent) {\n    /**\n     * When the connection to the server has been interrupted and it's attempting\n     * to reconnect.\n     */\n    RoomEvent[\"Reconnecting\"] = \"reconnecting\";\n    /**\n     * Fires when a reconnection has been successful.\n     */\n    RoomEvent[\"Reconnected\"] = \"reconnected\";\n    /**\n     * When disconnected from room. This fires when room.disconnect() is called or\n     * when an unrecoverable connection issue had occured\n     */\n    RoomEvent[\"Disconnected\"] = \"disconnected\";\n    /**\n     * When input or output devices on the machine have changed.\n     */\n    RoomEvent[\"MediaDevicesChanged\"] = \"mediaDevicesChanged\";\n    /**\n     * When a [[RemoteParticipant]] joins *after* the local\n     * participant. It will not emit events for participants that are already\n     * in the room\n     *\n     * args: ([[RemoteParticipant]])\n     */\n    RoomEvent[\"ParticipantConnected\"] = \"participantConnected\";\n    /**\n     * When a [[RemoteParticipant]] leaves *after* the local\n     * participant has joined.\n     *\n     * args: ([[RemoteParticipant]])\n     */\n    RoomEvent[\"ParticipantDisconnected\"] = \"participantDisconnected\";\n    /**\n     * When a new track is published to room *after* the local\n     * participant has joined. It will not fire for tracks that are already published.\n     *\n     * A track published doesn't mean the participant has subscribed to it. It's\n     * simply reflecting the state of the room.\n     *\n     * args: ([[RemoteTrackPublication]], [[RemoteParticipant]])\n     */\n    RoomEvent[\"TrackPublished\"] = \"trackPublished\";\n    /**\n     * The [[LocalParticipant]] has subscribed to a new track. This event will **always**\n     * fire as long as new tracks are ready for use.\n     *\n     * args: ([[RemoteTrack]], [[RemoteTrackPublication]], [[RemoteParticipant]])\n     */\n    RoomEvent[\"TrackSubscribed\"] = \"trackSubscribed\";\n    /**\n     * Could not subscribe to a track\n     *\n     * args: (track sid, [[RemoteParticipant]])\n     */\n    RoomEvent[\"TrackSubscriptionFailed\"] = \"trackSubscriptionFailed\";\n    /**\n     * A [[RemoteParticipant]] has unpublished a track\n     *\n     * args: ([[RemoteTrackPublication]], [[RemoteParticipant]])\n     */\n    RoomEvent[\"TrackUnpublished\"] = \"trackUnpublished\";\n    /**\n     * A subscribed track is no longer available. Clients should listen to this\n     * event and ensure they detach tracks.\n     *\n     * args: ([[Track]], [[RemoteTrackPublication]], [[RemoteParticipant]])\n     */\n    RoomEvent[\"TrackUnsubscribed\"] = \"trackUnsubscribed\";\n    /**\n     * A track that was muted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\n     *\n     * args: ([[TrackPublication]], [[Participant]])\n     */\n    RoomEvent[\"TrackMuted\"] = \"trackMuted\";\n    /**\n     * A track that was unmuted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\n     *\n     * args: ([[TrackPublication]], [[Participant]])\n     */\n    RoomEvent[\"TrackUnmuted\"] = \"trackUnmuted\";\n    /**\n     * A local track was published successfully. This event is helpful to know\n     * when to update your local UI with the newly published track.\n     *\n     * args: ([[LocalTrackPublication]], [[LocalParticipant]])\n     */\n    RoomEvent[\"LocalTrackPublished\"] = \"localTrackPublished\";\n    /**\n     * A local track was unpublished. This event is helpful to know when to remove\n     * the local track from your UI.\n     *\n     * When a user stops sharing their screen by pressing \"End\" on the browser UI,\n     * this event will also fire.\n     *\n     * args: ([[LocalTrackPublication]], [[LocalParticipant]])\n     */\n    RoomEvent[\"LocalTrackUnpublished\"] = \"localTrackUnpublished\";\n    /**\n     * Active speakers changed. List of speakers are ordered by their audio level.\n     * loudest speakers first. This will include the LocalParticipant too.\n     *\n     * args: (Array<[[Participant]]>)\n     */\n    RoomEvent[\"ActiveSpeakersChanged\"] = \"activeSpeakersChanged\";\n    /**\n     * @deprecated Use ParticipantMetadataChanged instead\n     * @internal\n     */\n    RoomEvent[\"MetadataChanged\"] = \"metadataChanged\";\n    /**\n     * Participant metadata is a simple way for app-specific state to be pushed to\n     * all users.\n     * When RoomService.UpdateParticipantMetadata is called to change a participant's\n     * state, *all*  participants in the room will fire this event.\n     *\n     * args: (prevMetadata: string, [[Participant]])\n     *\n     */\n    RoomEvent[\"ParticipantMetadataChanged\"] = \"participantMetaDataChanged\";\n    /**\n     * Room metadata is a simple way for app-specific state to be pushed to\n     * all users.\n     * When RoomService.UpdateRoomMetadata is called to change a room's state,\n     * *all*  participants in the room will fire this event.\n     *\n     * args: (string)\n     */\n    RoomEvent[\"RoomMetadataChanged\"] = \"roomMetadataChanged\";\n    /**\n     * Data received from another participant.\n     * Data packets provides the ability to use LiveKit to send/receive arbitrary payloads.\n     * All participants in the room will receive the messages sent to the room.\n     *\n     * args: (payload: Uint8Array, participant: [[Participant]], kind: [[DataPacket_Kind]])\n     */\n    RoomEvent[\"DataReceived\"] = \"dataReceived\";\n    /**\n     * LiveKit will attempt to autoplay all audio tracks when you attach them to\n     * audio elements. However, if that fails, we'll notify you via AudioPlaybackStatusChanged.\n     * `Room.canPlayAudio` will indicate if audio playback is permitted.\n     */\n    RoomEvent[\"AudioPlaybackStatusChanged\"] = \"audioPlaybackChanged\";\n    /**\n     * When we have encountered an error while attempting to create a track.\n     * The errors take place in getUserMedia().\n     * Use MediaDeviceFailure.getFailure(error) to get the reason of failure.\n     * [[getAudioCreateError]] and [[getVideoCreateError]] will indicate if it had\n     * an error while creating the audio or video track respectively.\n     *\n     * args: (error: Error)\n     */\n    RoomEvent[\"MediaDevicesError\"] = \"mediaDevicesError\";\n    /**\n     * Connection quality was changed for a Participant. It'll receive updates\n     * from the local participant, as well as any [[RemoteParticipant]]s that we are\n     * subscribed to.\n     *\n     * args: (connectionQuality: [[ConnectionQuality]], participant: [[Participant]])\n     */\n    RoomEvent[\"ConnectionQualityChanged\"] = \"connectionQualityChanged\";\n})(RoomEvent = exports.RoomEvent || (exports.RoomEvent = {}));\nvar ParticipantEvent;\n(function (ParticipantEvent) {\n    ParticipantEvent[\"TrackPublished\"] = \"trackPublished\";\n    ParticipantEvent[\"TrackSubscribed\"] = \"trackSubscribed\";\n    ParticipantEvent[\"TrackSubscriptionFailed\"] = \"trackSubscriptionFailed\";\n    ParticipantEvent[\"TrackUnpublished\"] = \"trackUnpublished\";\n    ParticipantEvent[\"TrackUnsubscribed\"] = \"trackUnsubscribed\";\n    ParticipantEvent[\"TrackMuted\"] = \"trackMuted\";\n    ParticipantEvent[\"TrackUnmuted\"] = \"trackUnmuted\";\n    ParticipantEvent[\"LocalTrackPublished\"] = \"localTrackPublished\";\n    ParticipantEvent[\"LocalTrackUnpublished\"] = \"localTrackUnpublished\";\n    ParticipantEvent[\"MetadataChanged\"] = \"metadataChanged\";\n    ParticipantEvent[\"ParticipantMetadataChanged\"] = \"participantMetadataChanged\";\n    ParticipantEvent[\"DataReceived\"] = \"dataReceived\";\n    ParticipantEvent[\"IsSpeakingChanged\"] = \"isSpeakingChanged\";\n    ParticipantEvent[\"ConnectionQualityChanged\"] = \"connectionQualityChanged\";\n    // fired only on LocalParticipant\n    /** @internal */\n    ParticipantEvent[\"MediaDevicesError\"] = \"mediaDevicesError\";\n})(ParticipantEvent = exports.ParticipantEvent || (exports.ParticipantEvent = {}));\n/** @internal */\nvar EngineEvent;\n(function (EngineEvent) {\n    EngineEvent[\"Connected\"] = \"connected\";\n    EngineEvent[\"Disconnected\"] = \"disconnected\";\n    EngineEvent[\"Reconnecting\"] = \"reconnecting\";\n    EngineEvent[\"Reconnected\"] = \"reconnected\";\n    EngineEvent[\"ParticipantUpdate\"] = \"participantUpdate\";\n    EngineEvent[\"MediaTrackAdded\"] = \"mediaTrackAdded\";\n    EngineEvent[\"ActiveSpeakersUpdate\"] = \"activeSpeakersUpdate\";\n    EngineEvent[\"SpeakersChanged\"] = \"speakersChanged\";\n    EngineEvent[\"DataPacketReceived\"] = \"dataPacketReceived\";\n    EngineEvent[\"RemoteMuteChanged\"] = \"remoteMuteChanged\";\n    EngineEvent[\"RoomUpdate\"] = \"roomUpdate\";\n    EngineEvent[\"ConnectionQualityUpdate\"] = \"connectionQualityUpdate\";\n})(EngineEvent = exports.EngineEvent || (exports.EngineEvent = {}));\nvar TrackEvent;\n(function (TrackEvent) {\n    TrackEvent[\"Message\"] = \"message\";\n    TrackEvent[\"Muted\"] = \"muted\";\n    TrackEvent[\"Unmuted\"] = \"unmuted\";\n    TrackEvent[\"Ended\"] = \"ended\";\n    /** @internal */\n    TrackEvent[\"UpdateSettings\"] = \"updateSettings\";\n    /** @internal */\n    TrackEvent[\"UpdateSubscription\"] = \"updateSubscription\";\n    /** @internal */\n    TrackEvent[\"AudioPlaybackStarted\"] = \"audioPlaybackStarted\";\n    /** @internal */\n    TrackEvent[\"AudioPlaybackFailed\"] = \"audioPlaybackFailed\";\n    /** @internal */\n    TrackEvent[\"VisibilityChanged\"] = \"visibilityChanged\";\n    /** @internal */\n    TrackEvent[\"VideoDimensionsChanged\"] = \"videoDimensionsChanged\";\n})(TrackEvent = exports.TrackEvent || (exports.TrackEvent = {}));\n"},"sourceMaps":{"js":{"version":3,"file":"events.js","sourceRoot":"","sources":["../../src/room/events.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;GAQG;AACH,IAAY,SAwLX;AAxLD,WAAY,SAAS;IACnB;;;OAGG;IACH,0CAA6B,CAAA;IAE7B;;OAEG;IACH,wCAA2B,CAAA;IAE3B;;;OAGG;IACH,0CAA6B,CAAA;IAE7B;;OAEG;IACH,wDAA2C,CAAA;IAE3C;;;;;;OAMG;IACH,0DAA6C,CAAA;IAE7C;;;;;OAKG;IACH,gEAAmD,CAAA;IAEnD;;;;;;;;OAQG;IACH,8CAAiC,CAAA;IAEjC;;;;;OAKG;IACH,gDAAmC,CAAA;IAEnC;;;;OAIG;IACH,gEAAmD,CAAA;IAEnD;;;;OAIG;IACH,kDAAqC,CAAA;IAErC;;;;;OAKG;IACH,oDAAuC,CAAA;IAEvC;;;;OAIG;IACH,sCAAyB,CAAA;IAEzB;;;;OAIG;IACH,0CAA6B,CAAA;IAE7B;;;;;OAKG;IACH,wDAA2C,CAAA;IAE3C;;;;;;;;OAQG;IACH,4DAA+C,CAAA;IAE/C;;;;;OAKG;IACH,4DAA+C,CAAA;IAE/C;;;OAGG;IACH,gDAAmC,CAAA;IAEnC;;;;;;;;OAQG;IACH,sEAAyD,CAAA;IAEzD;;;;;;;OAOG;IACH,wDAA2C,CAAA;IAE3C;;;;;;OAMG;IACH,0CAA6B,CAAA;IAE7B;;;;OAIG;IACH,gEAAmD,CAAA;IAEnD;;;;;;;;OAQG;IACH,oDAAuC,CAAA;IAEvC;;;;;;OAMG;IACH,kEAAqD,CAAA;AACvD,CAAC,EAxLW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAwLpB;AAED,IAAY,gBAkBX;AAlBD,WAAY,gBAAgB;IAC1B,qDAAiC,CAAA;IACjC,uDAAmC,CAAA;IACnC,uEAAmD,CAAA;IACnD,yDAAqC,CAAA;IACrC,2DAAuC,CAAA;IACvC,6CAAyB,CAAA;IACzB,iDAA6B,CAAA;IAC7B,+DAA2C,CAAA;IAC3C,mEAA+C,CAAA;IAC/C,uDAAmC,CAAA;IACnC,6EAAyD,CAAA;IACzD,iDAA6B,CAAA;IAC7B,2DAAuC,CAAA;IACvC,yEAAqD,CAAA;IACrD,iCAAiC;IACjC,gBAAgB;IAChB,2DAAuC,CAAA;AACzC,CAAC,EAlBW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAkB3B;AAED,gBAAgB;AAChB,IAAY,WAaX;AAbD,WAAY,WAAW;IACrB,sCAAuB,CAAA;IACvB,4CAA6B,CAAA;IAC7B,4CAA6B,CAAA;IAC7B,0CAA2B,CAAA;IAC3B,sDAAuC,CAAA;IACvC,kDAAmC,CAAA;IACnC,4DAA6C,CAAA;IAC7C,kDAAmC,CAAA;IACnC,wDAAyC,CAAA;IACzC,sDAAuC,CAAA;IACvC,wCAAyB,CAAA;IACzB,kEAAmD,CAAA;AACrD,CAAC,EAbW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAatB;AAED,IAAY,UAiBX;AAjBD,WAAY,UAAU;IACpB,iCAAmB,CAAA;IACnB,6BAAe,CAAA;IACf,iCAAmB,CAAA;IACnB,6BAAe,CAAA;IACf,gBAAgB;IAChB,+CAAiC,CAAA;IACjC,gBAAgB;IAChB,uDAAyC,CAAA;IACzC,gBAAgB;IAChB,2DAA6C,CAAA;IAC7C,gBAAgB;IAChB,yDAA2C,CAAA;IAC3C,gBAAgB;IAChB,qDAAuC,CAAA;IACvC,gBAAgB;IAChB,+DAAiD,CAAA;AACnD,CAAC,EAjBW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAiBrB","sourcesContent":[null]}},"error":null,"hash":"78d1bc26af6357e6a0a0ef7cef983afa","cacheData":{"env":{}}}